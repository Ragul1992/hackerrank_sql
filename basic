MS SQL SERVER 

1)Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

The CITY table is described as follows:

Select * FROM city where countrycode = 'USA' AND POPULATION > 100000 ;
----------------------------------------------------------------------------------------------------------------------------------------------------

2)Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:
(When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths  and . The longest name is PQRS, but there are  options for shortest named city. Choose ABC, because it comes first alphabetically.

Note
You can write two separate queries to get the desired output. It need not be a single query.)
SOL 1:
SELECT CITY, LEN(CITY) FROM STATION ORDER BY LEN(CITY) , CITY OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY ;
SELECT CITY, LEN(CITY) FROM STATION ORDER BY LEN(CITY) DESC OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY  ;

SOL 2:
SELECT TOP(1)CITY, LEN(CITY) FROM STATION ORDER BY LEN(CITY),CITY;
SELECT TOP(1)CITY, LEN(CITY) FROM STATION ORDER BY LEN(CITY) DESC,CITY DESC;

------------------------------------------------------------------------------------------------------------------------------------------------------

3)Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SOL :
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE '[A,E,I,O,U]%';

----------------------------------------------------------------------------------------------------------------------------------------------------
4)Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SOL :
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE '%[A,E,I,O,U]';
---------------------------------------------------------------------------------------------------------------------------------------------------
5)Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SOL:

SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTRING(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTRING(CITY, LEN(CITY),1)) NOT IN ('a','e','i','o','u');  
---------------------------------------------------------------------------------------------------------------------------------------------------
6)Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SOL :
SELECT NAME FROM STUDENTS WHERE MARKS> 75  ORDER BY SUBSTRING(NAME,LEN(NAME)-2,3),ID;
--------------------------------------------------------------------------------------------------------------------------
7)Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SOL:
SELECT name FROM employee order by name asc;
-------------------------------------------------------------------------------------------------------------------------
8)Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
SOL :
select name from employee where salary >2000 and months <10 order by employee_id ;
-------------------------------------------------------------------------------------------------------------------------
9)Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
Input Format

The TRIANGLES table is described as follows:

SOL:
SELECT CASE WHEN A+B<=C OR B+C<= A OR A+C<= B  THEN 'Not A Triangle'
            WHEN A=B AND B=C THEN 'Equilateral'
            WHEN A=B OR B=C OR C=A THEN 'Isosceles'
            ELSE 'Scalene' 
            END 
            FROM TRIANGLES
---------------------------------------------------------------------------------------------------------------------------
